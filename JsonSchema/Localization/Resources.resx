<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_Const" xml:space="preserve">
    <value>Expected [[value]]</value>
  </data>
  <data name="Error_ContainsTooFew" xml:space="preserve">
    <value>Value should contain at least [[minimum]] matching items</value>
  </data>
  <data name="Error_ContainsTooMany" xml:space="preserve">
    <value>Value should contain no more than [[maximum]] matching items</value>
  </data>
  <data name="Error_DependentRequired" xml:space="preserve">
    <value>Some required property dependencies are missing: [[missing]]</value>
  </data>
  <data name="Error_DependentSchemas" xml:space="preserve">
    <value>Some properties failed their dependent schemas: [[failed]]</value>
  </data>
  <data name="Error_Enum" xml:space="preserve">
    <value>Value should match one of the values specified by the enum</value>
  </data>
  <data name="Error_ExclusiveMaximum" xml:space="preserve">
    <value>[[received]] should be less than [[limit]]</value>
  </data>
  <data name="Error_ExclusiveMinimum" xml:space="preserve">
    <value>[[received]] shoudl be greater than [[limit]]</value>
  </data>
  <data name="Error_FalseSchema" xml:space="preserve">
    <value>All values fail against the false schema</value>
  </data>
  <data name="Error_Format" xml:space="preserve">
    <value>Value does not match format [[format]]</value>
  </data>
  <data name="Error_FormatWithDetail" xml:space="preserve">
    <value>Value does not match format [[format]]: [[detail]]</value>
  </data>
  <data name="Error_Maximum" xml:space="preserve">
    <value>[[received]] should be at most [[limit]]</value>
  </data>
  <data name="Error_MaxItems" xml:space="preserve">
    <value>Value should have at most [[limit]] items</value>
  </data>
  <data name="Error_MaxLength" xml:space="preserve">
    <value>Value should be at most [[limit]] characters</value>
  </data>
  <data name="Error_MaxProperties" xml:space="preserve">
    <value>Value should have at most [[limit]] properties</value>
  </data>
  <data name="Error_MetaSchemaValidation" xml:space="preserve">
    <value>Cannot validate current schema against meta-schema [[uri]]</value>
  </data>
  <data name="Error_Minimum" xml:space="preserve">
    <value>[[received]] should be at least [[limit]]</value>
  </data>
  <data name="Error_MinItems" xml:space="preserve">
    <value>Value should have at least [[limit]] items</value>
  </data>
  <data name="Error_MinLength" xml:space="preserve">
    <value>Value should be at least [[limit]] characters</value>
  </data>
  <data name="Error_MinProperties" xml:space="preserve">
    <value>Value should have at least [[limit]] properties</value>
  </data>
  <data name="Error_MultipleOf" xml:space="preserve">
    <value>[[received]] should be a multiple of [[divisor]]</value>
  </data>
  <data name="Error_OneOf" xml:space="preserve">
    <value>Expected 1 matching subschema but found [[count]]</value>
  </data>
  <data name="Error_Pattern" xml:space="preserve">
    <value>The string value is not a match for the indicated regular expression</value>
  </data>
  <data name="Error_Required" xml:space="preserve">
    <value>Required properties [[missing]] are not present</value>
  </data>
  <data name="Error_Type" xml:space="preserve">
    <value>Value is [[received]] but should be [[expected]]</value>
  </data>
  <data name="Error_UniqueItems" xml:space="preserve">
    <value>Found duplicates at the following index pairs: [[duplicates]]</value>
  </data>
  <data name="Error_UnknownFormat" xml:space="preserve">
    <value>Cannot validate unknown format [[format]]</value>
  </data>
  <data name="Error_UnknownVocabularies" xml:space="preserve">
    <value>Validator does not know about these required vocabularies: [[vocabs]]</value>
  </data>
</root>