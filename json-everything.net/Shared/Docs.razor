@using Markdig
@using System.Diagnostics
@using System.Text.RegularExpressions
@using JsonEverythingNet.Services
@using Markdig.SyntaxHighlighting

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ApiDocGenerationService DocGenerator

<style>
	.page > main {
		display: flex;
		flex-flow: column nowrap;
	}

		.page > main > article {
			flex: 1 1 auto;
			display: flex;
		}

			.page > main > article > .row {
				flex: 1 1 auto;
			}
</style>

<div>
	@((MarkupString)_value)
	<AnchorNavigation @ref="_anchorNav" Owner="this"/>
</div>

@code{

	[Parameter]
	public string? Page { get; set; }

		private const string _headerLinkPattern = "<h$1 id=\"$2\">$3<a id=\"user-content-syntax\" class=\"markdown-anchor m-2\" aria-hidden=\"true\" href=\"[[localPath]]#$2\"><svg class=\"markdown-anchor\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a></h$1>";
	private static readonly Regex _tablePattern = new(@"<table>");

	private string _value = "";

#pragma warning disable CS8618
	private AnchorNavigation _anchorNav;
#pragma warning restore CS8618

	public async Task SetPage(string page)
	{
		if (Page == page) return;

		Page = page;
		await UpdateView();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await UpdateView();
	}

	private async Task UpdateView()
	{
		if (string.IsNullOrEmpty(Page)) return;

		string markdown;

		if (Page.StartsWith("type/"))
		{
			var typeName = Page[5..];
			var type = AppDomain.CurrentDomain.GetAssemblies()
				.SelectMany(x =>
				{
					try
					{
						return x.ExportedTypes;
					}
					catch (Exception e)
					{
						Console.WriteLine($"Failed to load types for assembly '{x.FullName}'");
						return Enumerable.Empty<Type>();
					}
				})
				.FirstOrDefault(x => x.FullName == typeName);
			markdown = type == null
				? $"***ERROR** Couldn't find type `{typeName}`.  Please report by opening an issue on Github."
				: await DocGenerator.GenerateForType(type);
		}
		else
		{
			try
			{
				markdown = await Http.GetStringAsync($"/md/{Page}.md");
			}
			catch (Exception)
			{
				Console.WriteLine("Markdown file could not be found.");
				_value = "";
				return;
			}
		}
	
		var pipeline = new MarkdownPipelineBuilder()
			.UseAdvancedExtensions()
			.UseSyntaxHighlighting()
			.Build();
		var html = Markdown.ToHtml(markdown, pipeline);
		html = html.Replace("<table>", "<table class=\"table\">");

		if (!Page.Contains("release-notes/") &&
			!Page.Contains("type/") &&
			!Page.Contains("examples/"))
		{
			var localPath = GetPath();
			var headerLinkPattern = _headerLinkPattern.Replace("[[localPath]]", localPath);
			html = RegexPatterns.HeaderPattern.Replace(html, headerLinkPattern);
		}

		_value = html;
	}

	private string GetPath()
	{
		return NavigationManager.Uri.Replace(NavigationManager.BaseUri, string.Empty).Split('#')[0];
	}
}